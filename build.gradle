plugins {
  id "us.kirchmeier.capsule" version "1.0.2"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven'

group = "com.github.CherokeeLanguage"
version = '20191007'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
	mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
	provided
}

dependencies {
	compile 'commons-io:commons-io:+'
	compile 'org.apache.commons:commons-text:+'
}

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
  test {
    compileClasspath += configurations.provided
    runtimeClasspath += configurations.provided
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	javadoc.failOnError=false
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
    f = file('.settings/org.eclipse.core.runtime.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('line.separator=\\n\n')
}

task fatjar(type: FatCapsule) {
  	archiveName 'CherokeeLemmatizer.jar'
	applicationClass 'com.cherokeelessons.lemmatizer.Main'
	capsuleManifest {
    	jvmArgs = ['-Dfile.encoding=UTF-8']
	}
}

project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}
}

eclipse {
	project {
		name = 'CherokeeLemmatizer'
		referencedProjects
		natures 'org.eclipse.buildship.core.gradleprojectnature'
	}
	
	classpath {
		plusConfigurations += [configurations.provided]
		containers += ['org.springsource.ide.eclipse.gradle.classpathcontainer']
		downloadSources = true
		downloadJavadoc = true
	}

	jdt {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	wtp {
		facet {
			facets = []
			facet name: 'jst.java', version: '1.8'
			//facet name: 'jst.web', version: '3.0'
		}
	}

}

task "create-dirs" << {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
